{"ast":null,"code":"var _jsxFileName = \"/home/ian/Dev/LearningToCode/React Tutorial/react-complete-guide/src/components/Expenses/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport \"./Expenses.css\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n\n  function handleFilterChange(year) {\n    setFilteredYear(year);\n  } //Its a good practice to avoid putting to much logic inside the JSX code\n  //So instead we insert the logic before return the JSX statement\n\n\n  const data = props.data.filter(expense => expense.date.getFullYear() === parseFloat(filteredYear));\n\n  let display = /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"You have no expenses this year yet.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 17\n  }, this);\n\n  if (data.length > 0) {\n    display = data.map(expense => {\n      return /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        title: expense.title,\n        amount: expense.amount,\n        date: expense.date\n      }, expense.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onFilterChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), display]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Expenses, \"N/aF5O1Q1Yumn7zBaSWVzvWGO2A=\");\n\n_c = Expenses;\nexport default ExpensesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["/home/ian/Dev/LearningToCode/React Tutorial/react-complete-guide/src/components/Expenses/Expenses.js"],"names":["React","useState","ExpenseItem","Card","ExpensesFilter","Expenses","props","filteredYear","setFilteredYear","handleFilterChange","year","data","filter","expense","date","getFullYear","parseFloat","display","length","map","title","amount","id","ExpensesList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,gBAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,MAAD,CAAhD;;AAEA,WAASQ,kBAAT,CAA4BC,IAA5B,EAAkC;AAChCF,IAAAA,eAAe,CAACE,IAAD,CAAf;AACD,GALsB,CAOvB;AACA;;;AACA,QAAMC,IAAI,GAAGL,KAAK,CAACK,IAAN,CAAWC,MAAX,CACVC,OAAD,IAAaA,OAAO,CAACC,IAAR,CAAaC,WAAb,OAA+BC,UAAU,CAACT,YAAD,CAD3C,CAAb;;AAIA,MAAIU,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,MAAGN,IAAI,CAACO,MAAL,GAAc,CAAjB,EAAmB;AACjBD,IAAAA,OAAO,GAAGN,IAAI,CAACQ,GAAL,CAASN,OAAO,IAAG;AAC3B,0BACA,QAAC,WAAD;AACA,QAAA,KAAK,EAAEA,OAAO,CAACO,KADf;AAEA,QAAA,MAAM,EAAEP,OAAO,CAACQ,MAFhB;AAGA,QAAA,IAAI,EAAER,OAAO,CAACC;AAHd,SAAkBD,OAAO,CAACS,EAA1B;AAAA;AAAA;AAAA;AAAA,cADA;AAMD,KAPS,CAAV;AAQD;;AAED,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BACE,QAAC,cAAD;AACE,QAAA,QAAQ,EAAEf,YADZ;AAEE,QAAA,cAAc,EAAEE;AAFlB;AAAA;AAAA;AAAA;AAAA,cADF,EAKGQ,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GArCQZ,Q;;KAAAA,Q;AAuCT,eAAekB,YAAf","sourcesContent":["import React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport \"./Expenses.css\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\n\nfunction Expenses(props) {\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n\n  function handleFilterChange(year) {\n    setFilteredYear(year);\n  }\n\n  //Its a good practice to avoid putting to much logic inside the JSX code\n  //So instead we insert the logic before return the JSX statement\n  const data = props.data.filter(\n    (expense) => expense.date.getFullYear() === parseFloat(filteredYear)\n  );\n\n  let display = <h1>You have no expenses this year yet.</h1>\n\n  if(data.length > 0){\n    display = data.map(expense =>{\n      return (\n      <ExpenseItem key={expense.id}\n      title={expense.title}\n      amount={expense.amount}\n      date={expense.date}/>\n      )\n    })\n  }\n\n  return (\n    <div>\n      <Card className=\"expenses\">\n        <ExpensesFilter\n          selected={filteredYear}\n          onFilterChange={handleFilterChange}\n        />\n        {display}\n      </Card>\n    </div>\n  );\n}\n\nexport default ExpensesList;\n"]},"metadata":{},"sourceType":"module"}